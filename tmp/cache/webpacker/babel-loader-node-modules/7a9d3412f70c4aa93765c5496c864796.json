{"ast":null,"code":"import consumer from \"./consumer\";\nconsumer.subscriptions.create(\"CommentChannel\", {\n  connected: function connected() {// Called when the subscription is ready for use on the server\n    // console.log(\"Connected to server! Congrats!!!\")\n  },\n  disconnected: function disconnected() {// Called when the subscription has been terminated by the server\n    // console.log(\"DISCONNECTED !!!\")\n  },\n  received: function received(data) {\n    // Called when there's incoming data on the websocket for this channel\n    alert(JSON.stringify(data));\n\n    if (data['action'] == 'edit') {\n      refreshEdittedCommentInfo(data['comment']);\n    } else if (data['action'] == 'destroy') {\n      destroyCommentInfo();\n    }\n  }\n});\n\nfunction refreshEdittedCommentInfo(comment) {\n  var comment_body = document.getElementById(\"comment_body_\".concat(comment['id']));\n  comment_body.innerText = comment['body'];\n  var badge = \"    <span class=\\\"badge  badge-warning\\\">JUST MODIFIED (at: \".concat(comment['updated_at'], \")</span>\");\n  var element = document.getElementById(\"comment-updated-badge-\".concat(comment['id']));\n  element.innerHTML = badge;\n}\n\nfunction destroyCommentInfo() {\n  var commenter = data['author'];\n  var commentShadow = document.getElementById(\"shadow-\".concat(data['id']));\n  commentShadow.innerHTML = \"\" + \"<i>Commenter: \".concat(commenter, \"</i><br>\") + \"<i style='color: red'>DELETED THIS COMMENT</i>\";\n}","map":{"version":3,"sources":["/Users/DFilippov/Projects/blogRails/app/javascript/channels/comment_channel.js"],"names":["consumer","subscriptions","create","connected","disconnected","received","data","alert","JSON","stringify","refreshEdittedCommentInfo","destroyCommentInfo","comment","comment_body","document","getElementById","innerText","badge","element","innerHTML","commenter","commentShadow"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AAEIA,QAAQ,CAACC,aAAT,CAAuBC,MAAvB,CAA8B,gBAA9B,EAAgD;AAC9CC,EAAAA,SAD8C,uBAClC,CACV;AACA;AACD,GAJ6C;AAM9CC,EAAAA,YAN8C,0BAM/B,CACb;AACA;AACD,GAT6C;AAW9CC,EAAAA,QAX8C,oBAWrCC,IAXqC,EAW/B;AACb;AAEAC,IAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAD,CAAL;;AAEA,QAAIA,IAAI,CAAC,QAAD,CAAJ,IAAkB,MAAtB,EAA8B;AAC5BI,MAAAA,yBAAyB,CAACJ,IAAI,CAAC,SAAD,CAAL,CAAzB;AACD,KAFD,MAEO,IAAIA,IAAI,CAAC,QAAD,CAAJ,IAAkB,SAAtB,EAAiC;AACtCK,MAAAA,kBAAkB;AACnB;AAGF;AAvB6C,CAAhD;;AA0BJ,SAASD,yBAAT,CAAmCE,OAAnC,EAA4C;AAC1C,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAT,wBAAwCH,OAAO,CAAC,IAAD,CAA/C,EAArB;AACAC,EAAAA,YAAY,CAACG,SAAb,GAAyBJ,OAAO,CAAC,MAAD,CAAhC;AACA,MAAMK,KAAK,yEAAgEL,OAAO,CAAC,YAAD,CAAvE,aAAX;AACA,MAAMM,OAAO,GAAGJ,QAAQ,CAACC,cAAT,iCAAiDH,OAAO,CAAC,IAAD,CAAxD,EAAhB;AACAM,EAAAA,OAAO,CAACC,SAAR,GAAoBF,KAApB;AACD;;AAED,SAASN,kBAAT,GAA8B;AAC5B,MAAMS,SAAS,GAAGd,IAAI,CAAC,QAAD,CAAtB;AACA,MAAMe,aAAa,GAAGP,QAAQ,CAACC,cAAT,kBAAkCT,IAAI,CAAC,IAAD,CAAtC,EAAtB;AACAe,EAAAA,aAAa,CAACF,SAAd,GAA0B,6BACDC,SADC,gBAElB,gDAFR;AAGD","sourcesContent":["import consumer from \"./consumer\"\n\n    consumer.subscriptions.create(\"CommentChannel\", {\n      connected() {\n        // Called when the subscription is ready for use on the server\n        // console.log(\"Connected to server! Congrats!!!\")\n      },\n\n      disconnected() {\n        // Called when the subscription has been terminated by the server\n        // console.log(\"DISCONNECTED !!!\")\n      },\n\n      received(data) {\n        // Called when there's incoming data on the websocket for this channel\n\n        alert(JSON.stringify(data))\n\n        if (data['action'] == 'edit') {\n          refreshEdittedCommentInfo(data['comment'])\n        } else if (data['action'] == 'destroy') {\n          destroyCommentInfo()\n        }\n\n\n      }\n    });\n\nfunction refreshEdittedCommentInfo(comment) {\n  const comment_body = document.getElementById(`comment_body_${comment['id']}`);\n  comment_body.innerText = comment['body'];\n  const badge = `    <span class=\"badge  badge-warning\">JUST MODIFIED (at: ${comment['updated_at']})</span>`;\n  const element = document.getElementById(`comment-updated-badge-${comment['id']}`);\n  element.innerHTML = badge;\n}\n\nfunction destroyCommentInfo() {\n  const commenter = data['author'];\n  const commentShadow = document.getElementById(`shadow-${data['id']}`);\n  commentShadow.innerHTML = \"\" +\n          `<i>Commenter: ${commenter}</i><br>` +\n          \"<i style='color: red'>DELETED THIS COMMENT</i>\"\n}"]},"metadata":{},"sourceType":"module"}